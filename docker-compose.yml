services:
  # Web service (Django application)
  web:
    container_name: app
    # Build the Docker image from the current directory (.)
    build: .
    # Command to run when the container starts (run Gunicorn with 4 workers)
    command: python manage.py runserver
    # command:
#       [
#         "gunicorn",
#         "config.wsgi:application",
#         "--bind",
#         "0.0.0.0:8000",
#         "--workers",
#         "4",
#       ]
#     # Restart the container if it fails
#     restart: always
#     # Mount the current directory as a volume at /code
#     volumes:
#       - .:/code
#     # Expose port 8000 from the container to the host
#     ports:
#       - "8000:8000"
#     # Load environment variables from a .env file
#     env_file:
#       - .env
#     # Set the DJANGO_SETTINGS_MODULE environment variable
#     environment:
#       - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
#       - POSTGRES_DB=${POSTGRES_DB}
#       - POSTGRES_USER=${POSTGRES_USER}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#     # Depend on the cache service (i.e., start web after cache)
#     depends_on:
#       - db
#       - cache

#   # Database service (Postgresql)
#   db:
#     container_name: database
#     # Use the latest Postgresql image
#     image: postgres:latest
#     # Restart the container if it fails
#     restart: always
#     # Mount a volume at ./data/db to persist data
#     volumes:
#       - ./data/db:/var/lib/postgresql/data
#     # Load environment variables from a .env file
#     environment:
#       - POSTGRES_DB=${POSTGRES_DB}
#       - POSTGRES_USER=${POSTGRES_USER}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#     expose:
#       - "5432:5432"

#   pgadmin:
#     container_name: pgadmin
#     image: dpage/pgadmin4
#     restart: always
#     environment:
#       - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
#       - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
#     ports:
#       - "5050:80"

#   # Cache service (Redis)
#   cache:
#     container_name: redis
#     # Use the latest Redis image
#     image: redis:latest
#     # Restart the container if it fails
#     restart: always
#     # Mount a volume at ./data/cache to persist data
#     volumes:
#       - ./data/cache:/data

#   # Nginx service (reverse proxy)
#   nginx:
#     container_name: nginx
#     # Use the latest Nginx image
#     image: nginx:latest
#     # Restart the container if it fails
#     restart: always
#     # Mount volumes for Nginx configuration and code
#     volumes:
#       - ./config/nginx:/etc/nginx/templates
#       - .:/code
#     # Expose port 80 from the container to the host
#     ports:
#       - "80:80"

#   # RabbitMQ service (message broker)
#   # rabbitmq:
#   #   container_name: rabbitmq
#   #   # Use the RabbitMQ 3 management image
#   #   image: rabbitmq:3-management
#   #   # Restart the container if it fails
#   #   restart: always
#   #   # Expose ports for RabbitMQ and the management UI
#   #   volumes:
#   #     - ./data/rabbitmq:/var/lib/rabbitmq/data
#   #   ports:
#   #     - "5672:5672"
#   #     - "15672:15672"
#   #   # Set environment variables for RabbitMQ
#   #   environment:
#   #     RABBITMQ_DEFAULT_USER: guest
#   #     RABBITMQ_DEFAULT_PASS: guest

#   # Celery worker service
#   # worker:
#   #   container_name: celery_worker
#   #   # Build the Docker image from the current directory (.)
#   #   build: .
#   #   # Command to run when the container starts (run Celery worker)
#   #   command: celery -A config worker --concurrency=4 -l info
#   #   # Restart the container if it fails
#   #   restart: always
#   #   # Mount the current directory as a volume at /code
#   #   volumes:
#   #     - .:/code
#   #   # Set the DJANGO_SETTINGS_MODULE environment variable
#   #   environment:
#   #     - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
#   #     - BROKER_URL=amqp://guest:guest@rabbitmq:5672//
#   #     - CELERY_RESULT_BACKEND=rpc://
#   #   # Depend on the web service (i.e., start worker after web)
#   #   depends_on:
#   #     - rabbitmq
#   #   ports:
#   #     - "5555:5555"
