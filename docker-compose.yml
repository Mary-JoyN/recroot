networks:
  my_network:
    driver: bridge
services:
  web:
    container_name: app
    build: .
    networks:
      - my_network
    command:
      [
        "gunicorn",
        "config.wsgi:application",
        "--bind",
        "0.0.0.0:8000",
        "--workers",
        "4",
      ]
    restart: always
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    #       - POSTGRES_DB=${POSTGRES_DB}
    #       - POSTGRES_USER=${POSTGRES_USER}
    #       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #     depends_on:
    #       - db
    #       - cache

    #   # Database service (Postgresql)
    #   db:
    #     container_name: database
    #     # Use the latest Postgresql image
    #     image: postgres:latest
    #     # Restart the container if it fails
    #     restart: always
    #     # Mount a volume at ./data/db to persist data
    #     volumes:
    #       - ./data/db:/var/lib/postgresql/data
    #     # Load environment variables from a .env file
    #     environment:
    #       - POSTGRES_DB=${POSTGRES_DB}
    #       - POSTGRES_USER=${POSTGRES_USER}
    #       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #     expose:
    #       - "5432:5432"

    #   pgadmin:
    #     container_name: pgadmin
    #     image: dpage/pgadmin4
    #     restart: always
    #     environment:
    #       - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
    #       - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    #     ports:
    #       - "5050:80"

  # cache:
  #   container_name: cache
  #   image: cache:latest
  #   restart: always
  #   volumes:
  #     - ./data/cache:/data

  # Nginx service (reverse proxy)
  # nginx:
  #   container_name: nginx
  #   # Use the latest Nginx image
  #   image: nginx:latest
  #   # Restart the container if it fails
  #   restart: always
  #   # Mount volumes for Nginx configuration and code
  #   volumes:
  #     - ./config/nginx:/etc/nginx/templates
  #     - .:/code
  #   # Expose port 80 from the container to the host
  #   ports:
  #     - "80:80"

  # RabbitMQ service (message broker)
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    networks:
      - my_network
    restart: always
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq/data
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Celery worker service
  worker:
    container_name: celery_worker
    build: .
    networks:
      - my_network
    command: celery -A config worker --concurrency=4 -l info
    restart: always
    volumes:
      - .:/code
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - BROKER_URL=${BROKER_URL}
      - CELERY_RESULT_BACKEND=rpc://
    depends_on:
      rabbitmq:
        condition: service_healthy

  # Celery flower service
  # flower:
  #   container_name: celery_flower
  #   build: .
  #   networks:
  #     - my_network
  #   command: celery -A config flower
  #   volumes:
  #     - .:/code
  #   ports:
  #     - "5555:5555"
  #   env_file:
  #     - .env
  #   environment:
  #     - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
  #     - BROKER_URL=${BROKER_URL}
  #     - CELERY_RESULT_BACKEND=rpc://
  #   depends_on:
  #     - worker
